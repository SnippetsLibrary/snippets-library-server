/users:
  get:
    summary: Returns a list of users.
    tags: [user]
    description: Get all users
    parameters:
      - name: 'limit'
        in: 'query'
        description: 'max items count'
        required: false
        type: 'string'
      - name: 'page'
        in: 'query'
        description: 'page'
        required: false
        type: 'string'
      - name: 'regexp'
        in: 'query'
        description: 'search by name or email'
        required: false
        type: 'string'
    responses:
      '200':
        description: A JSON array of users
        content:
          application/json:
            # schema:
            #   allOf: # Combines the ApiResponse and the inline model
            #     - $ref: '#/components/schemas/ApiResponse'
            #     - type: object
            #       properties:
            #         payload:
            #           type: object
            #           properties:
            #             total: number
            #             items:
            #               type: array
            #               items:
            #                 $ref: '#/components/schemas/User'
            example:
              type: 'success'
              message: 'Users received'
              payload:
                {
                  totalDocs: 5,
                  limit: 100,
                  totalPages: 1,
                  page: 1,
                  pagingCounter: 1 NUM! (index of 1st el in page),
                  hasPrevPage: false,
                  hasNextPage: false,
                  prevPage: null,
                  nextPage: null,
                  docs: [{ _id: f847js, name: mick, email: mick@example.com }],
                }
      '500':
        description: Server Error
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiResponse'
    security:
      - bearerAuth: []
/users/{id}:
  get:
    summary: Returns user.
    tags: [user]
    description: Get user by id
    parameters:
      - name: 'id'
        in: 'path'
        required: false
        type: 'string'
    responses:
      '200':
        description: A JSON data of user
        content:
          application/json:
            example:
              type: 'success'
              message: 'User received'
              payload:
                {
                  _id: f847js,
                  name: mick,
                  email: mikcolka@gmail.com,
                  about: 'I am Dominik de-Koku',
                  totalPosts: 5,
                }
      '404':
        description: Not Found
      '500':
        description: Server Error
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiResponse'
    security:
      - bearerAuth: []
/users/{id}/posts:
  get:
    summary: Returns user posts.
    tags: [user]
    description: Get user posts
    parameters:
      - name: 'limit'
        in: 'query'
        description: 'max posts count'
        required: false
        type: 'string'
      - name: 'page'
        in: 'query'
        description: 'page'
        required: false
        type: 'string'
      - name: 'regexp'
        in: 'query'
        description: 'search string'
        required: false
        type: 'string'
      - name: 'tags'
        in: 'query'
        description: filter tags (do not use ')
        required: false
        example: '["nodejs"]'
        type: 'string'
      - name: 'id'
        in: 'path'
        required: false
        type: 'string'
    responses:
      '200':
        description: A JSON data of user posts
        content:
          application/json:
            example:
              type: 'success'
              message: 'User posts received'
              payload:
                {
                  _id: f847js,
                  page: 1,
                  limit: 1000,
                  last: 5,
                  items:
                    [
                      {
                        '_id': '62b9e38c0b77ad8fb16b71bc',
                        'title': 'how to install node',
                        'subtitle': 'for linux users',
                        'tags': ['nodejs'],
                        'author': '489h89h89hg89r5e',
                      },
                    ],
                }
      '404':
        description: Not Found
      '500':
        description: Server Error
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiResponse'
    security:
      - bearerAuth: []
/users/update/:
  patch:
    summary: update user if logged in
    tags: [user]
    description: Update user (can't update email and posts!!!)
    requestBody:
      required: true
      content:
        application/json:
          schema:
            example:
              name: 'mick1'
              password: '1234'
              about: 'I am Dominik de-Koku'
    responses:
      '200':
        description: Result
        content:
          application/json:
            example:
              payload: userData
              message: user confirmed
              type: success
      '500':
        description: Some Error
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiResponse'
    security:
      - bearerAuth: []
/users/register:
  post:
    description: Register user
    tags: [user]
    requestBody:
      required: true
      content:
        application/json:
          schema:
            example:
              name: 'mick'
              email: 'mick@f.com'
              password: '1234'
    responses:
      '200':
        description: Success - validation email sent
        content:
          application/json:
            example:
              message: 'Confirm user via email'
              type: 'success'
      '409':
        description: Warning occurred
        content:
          application/json:
            example:
              message: 'User with such name or email already exists'
              type: 'warning'
      '500':
        description: Some error
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiResponse'
/users/login:
  post:
    description: Login user
    tags: [user]
    requestBody:
      required: true
      content:
        application/json:
          schema:
            example:
              login: 'mick'
              password: '1234'
    responses:
      '200':
        description: Success - user logged in - token received
        content:
          application/json:
            example:
              payload:
                {
                  token: Bearer fjhu98gh7uh9iu9ryhf79g8ru9hu4g79ey8uhg,
                  expires: Sun Jun 26 2022 11:36:22 GMT+0300,
                  user: userData,
                }
              message: user confirmed
              type: success
      '404':
        description: User not found
        content:
          application/json:
            example:
              message: 'No user with such credentials'
              type: 'warning'
      '500':
        description: Some error
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiResponse'
/users/confirm/{hash}:
  get:
    summary: Creates user after confirm
    tags: [user]
    description: Confirm user via link from email
    parameters:
      - name: 'hash'
        in: 'path'
        description: 'Confirmation hash'
        required: true
        type: 'string'
    responses:
      '200':
        description: A JSON session token
        content:
          application/json:
            example:
              payload:
                {
                  token: Bearer fjhu98gh7uh9iu9ryhf79g8ru9hu4g79ey8uhg,
                  expires: Sun Jun 26 2022 11:36:22 GMT+0300,
                }
              message: user confirmed
              type: success
      '404':
        description: User not found
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiResponse'
            example:
              message: 'No such user in potential'
              type: 'error'
      '500':
        description: Some Error
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiResponse'
